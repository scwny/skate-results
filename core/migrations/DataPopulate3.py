# Generated by Django 5.0.14 on 2025-04-17 17:22

from django.db import migrations


def forwards(apps, schema_editor):
    # Get the model you want to populate (use `apps.get_model` to prevent circular imports)
    Competition = apps.get_model('core', 'Competition')
    Club = apps.get_model('core','Club')
    Skater = apps.get_model('core','Skater')
    Event = apps.get_model('core', 'Event')
    ScheduledSkater = apps.get_model('core', 'ScheduledSkater')

     # 1) Grab the existing competition
    try:
        comp = Competition.objects.get(name="Test Competition")
    except Competition.DoesNotExist:
        # nothing to do if the comp isn't there
        return
    
     # 2) Create the second event if it doesn't exist
    event2, created = Event.objects.get_or_create(
        competition = comp,
        eventNumber = 80,
        defaults = {
            'name':   "Excel Preliminary Boys",
            'date':    "2025-05-17",
            'status':  "scheduled",
        }
    )
    if not created:
        return  # already populated
    
        # Step 1: Get the Club
    try:
        scwny = Club.objects.get(name="Skating Club of Western New York")
    except Club.DoesNotExist:
        return  # Club not found, skip
    
   # Step 2: Create a new Skater
    new_skater = Skater.objects.create(
        firstName="Vincent",
        lastName="Lupiani",
        club=scwny
    )

       # Step 5: Schedule the new Skater into the new Event
    ScheduledSkater.objects.create(
        event=event2,
        skater=new_skater,
        orderNumber=1
    )


class Migration(migrations.Migration):

    dependencies = [
        ('core', 'DataPopulate2'),
    ]

    operations = [
        migrations.RunPython(forwards),  # Add the function here
    ]
