# Generated by Django 5.0.14 on 2025-04-17 17:22

from django.db import migrations


def populate_initial_data(apps, schema_editor):
    # Get the model you want to populate (use `apps.get_model` to prevent circular imports)
    Competition = apps.get_model('core', 'Competition')
    Club = apps.get_model('core','Club')
    Skater = apps.get_model('core','Skater')
    Event = apps.get_model('core', 'Event')
    ScheduledSkater = apps.get_model('core', 'ScheduledSkater')

     # 1) Grab the existing competition
    try:
        comp = Competition.objects.get(name="Test Competition")
    except Competition.DoesNotExist:
        # nothing to do if the comp isn't there
        return
    
     # 2) Create the second event if it doesn't exist
    event2, created = Event.objects.get_or_create(
        competition = comp,
        eventNumber = 79,
        defaults = {
            'name':   "Aspire 3 Free Skate Group E",
            'date':    "2025-05-17",
            'status':  "scheduled",
        }
    )
    if not created:
        return  # already populated
    
     # 3) Schedule every existing skater for this new event
    skaters = Skater.objects.all()
    objs = [
        ScheduledSkater(
            event       = event2,
            skater      = sk,
            orderNumber = idx
        )
        for idx, sk in enumerate(skaters, start=1)
    ]
    ScheduledSkater.objects.bulk_create(objs)


def backwards(apps, schema_editor):
    Competition       = apps.get_model('core', 'Competition')
    Event             = apps.get_model('core', 'Event')
    ScheduledSkater   = apps.get_model('core', 'ScheduledSkater')

    # Remove the event #2 and its scheduled skaters
    try:
        comp = Competition.objects.get(name="May Skate")
        event2 = Event.objects.get(competition=comp, eventNumber=2)
    except (Competition.DoesNotExist, Event.DoesNotExist):
        return

    # Delete all scheduled skaters then the event
    ScheduledSkater.objects.filter(event=event2).delete()
    event2.delete()


class Migration(migrations.Migration):

    dependencies = [
        ('core', 'DataPopulate'),
    ]

    operations = [
        migrations.RunPython(populate_initial_data, backwards),  # Add the function here
    ]
